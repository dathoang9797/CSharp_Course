// <auto-generated />
using AppCrawler;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppCrawler.Migrations
{
    [DbContext(typeof(EbookContext))]
    partial class EbookContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppCrawler.Attribute", b =>
                {
                    b.Property<int>("AttributeKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttributeKey"));

                    b.Property<int?>("BookAttributeId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AttributeCode");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("AttributeName");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("AttributeKey");

                    b.HasIndex("BookAttributeId");

                    b.ToTable("Attribute");
                });

            modelBuilder.Entity("AppCrawler.Author", b =>
                {
                    b.Property<int>("AuthorKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorKey"));

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("AuthorId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("AuthorName");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("AuthorKey");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("AppCrawler.Book", b =>
                {
                    b.Property<int>("BookKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookKey"));

                    b.Property<int>("AuthorKey")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<int>("CategoriesCategoryKey")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<int>("DiscountRate")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "discount_rate");

                    b.Property<int>("FavouriteCount")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "favourite_count");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MasterId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "master_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BookName");

                    b.Property<int>("OriginalPrice")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "original_price");

                    b.Property<decimal>("RatingAverage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ReviewCount")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "review_count");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "short_description");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "url_key");

                    b.HasKey("BookKey");

                    b.HasIndex("AuthorKey");

                    b.HasIndex("CategoriesCategoryKey");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("AppCrawler.BookAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookAttributeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BookKey")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookKey");

                    b.ToTable("BookAttribute");
                });

            modelBuilder.Entity("AppCrawler.Category", b =>
                {
                    b.Property<int>("CategoryKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryKey");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryKey"));

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("CategoryId");

                    b.Property<bool>("IsLeaf")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "is_leaf");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CategoryName");

                    b.HasKey("CategoryKey");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("AppCrawler.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ImageId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<string>("BaseUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "base_url");

                    b.Property<int?>("BookKey")
                        .HasColumnType("int");

                    b.Property<string>("LargeUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "large_url");

                    b.Property<string>("MediumUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "medium_url");

                    b.Property<string>("SmallUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "small_url");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "thumbnail_url");

                    b.HasKey("ImageId");

                    b.HasIndex("BookKey");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("AppCrawler.Attribute", b =>
                {
                    b.HasOne("AppCrawler.BookAttribute", null)
                        .WithMany("Attributes")
                        .HasForeignKey("BookAttributeId");
                });

            modelBuilder.Entity("AppCrawler.Book", b =>
                {
                    b.HasOne("AppCrawler.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppCrawler.Category", "Categories")
                        .WithMany()
                        .HasForeignKey("CategoriesCategoryKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Categories");
                });

            modelBuilder.Entity("AppCrawler.BookAttribute", b =>
                {
                    b.HasOne("AppCrawler.Book", null)
                        .WithMany("Specifications")
                        .HasForeignKey("BookKey");
                });

            modelBuilder.Entity("AppCrawler.Image", b =>
                {
                    b.HasOne("AppCrawler.Book", null)
                        .WithMany("Images")
                        .HasForeignKey("BookKey");
                });

            modelBuilder.Entity("AppCrawler.Book", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Specifications");
                });

            modelBuilder.Entity("AppCrawler.BookAttribute", b =>
                {
                    b.Navigation("Attributes");
                });
#pragma warning restore 612, 618
        }
    }
}
